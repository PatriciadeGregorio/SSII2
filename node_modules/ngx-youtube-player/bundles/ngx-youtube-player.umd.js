(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs/ReplaySubject')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', 'rxjs/ReplaySubject'], factory) :
	(factory((global.ng = global.ng || {}, global.ng.ngxYoutubePlayer = {}),global.ng.core,global.ng.common,global.Rx));
}(this, (function (exports,core,common,ReplaySubject) { 'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */



var __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
};

/**
 * @license ngx-youtube-library
 * Copyright (c) 2018 Oren Farhi
 * MIT license

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
 */
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @return {?}
 */
function win() {
    return window;
}
/**
 * @return {?}
 */
function YT() {
    return win()['YT'];
}
/**
 * @return {?}
 */
function Player() {
    return YT().Player;
}
var defaultSizes = {
    height: 270,
    width: 367
};
var YoutubePlayerService = (function () {
    function YoutubePlayerService(zone) {
        this.zone = zone;
        this.ytApiLoaded = false;
        this.createApi();
    }
    /**
     * @param {?} options
     * @return {?}
     */
    YoutubePlayerService.prototype.loadPlayerApi = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var /** @type {?} */ doc = win().document;
        if (!this.ytApiLoaded) {
            this.ytApiLoaded = true;
            var /** @type {?} */ playerApiScript = doc.createElement("script");
            playerApiScript.type = "text/javascript";
            playerApiScript.src = options.protocol + "://www.youtube.com/iframe_api";
            doc.body.appendChild(playerApiScript);
        }
    };
    /**
     * @param {?} elementId
     * @param {?} outputs
     * @param {?} sizes
     * @param {?=} videoId
     * @param {?=} playerVars
     * @return {?}
     */
    YoutubePlayerService.prototype.setupPlayer = /**
     * @param {?} elementId
     * @param {?} outputs
     * @param {?} sizes
     * @param {?=} videoId
     * @param {?=} playerVars
     * @return {?}
     */
    function (elementId, outputs, sizes, videoId, playerVars) {
        var _this = this;
        if (videoId === void 0) { videoId = ''; }
        var /** @type {?} */ createPlayer = function () {
            if (Player) {
                _this.createPlayer(elementId, outputs, sizes, videoId, playerVars);
            }
        };
        this.api.subscribe(createPlayer);
    };
    /**
     * @param {?} player
     * @return {?}
     */
    YoutubePlayerService.prototype.play = /**
     * @param {?} player
     * @return {?}
     */
    function (player) {
        player.playVideo();
    };
    /**
     * @param {?} player
     * @return {?}
     */
    YoutubePlayerService.prototype.pause = /**
     * @param {?} player
     * @return {?}
     */
    function (player) {
        player.pauseVideo();
    };
    /**
     * @param {?} media
     * @param {?} player
     * @return {?}
     */
    YoutubePlayerService.prototype.playVideo = /**
     * @param {?} media
     * @param {?} player
     * @return {?}
     */
    function (media, player) {
        var /** @type {?} */ id = media.id.videoId ? media.id.videoId : media.id;
        player.loadVideoById(id);
        this.play(player);
    };
    /**
     * @param {?} player
     * @return {?}
     */
    YoutubePlayerService.prototype.isPlaying = /**
     * @param {?} player
     * @return {?}
     */
    function (player) {
        // because YT is not loaded yet 1 is used - YT.PlayerState.PLAYING
        var /** @type {?} */ isPlayerReady = player && player.getPlayerState;
        var /** @type {?} */ playerState = isPlayerReady ? player.getPlayerState() : {};
        var /** @type {?} */ isPlayerPlaying = isPlayerReady
            ? playerState !== YT().PlayerState.ENDED && playerState !== YT().PlayerState.PAUSED
            : false;
        return isPlayerPlaying;
    };
    /**
     * @param {?} elementId
     * @param {?} outputs
     * @param {?} sizes
     * @param {?=} videoId
     * @param {?=} playerVars
     * @return {?}
     */
    YoutubePlayerService.prototype.createPlayer = /**
     * @param {?} elementId
     * @param {?} outputs
     * @param {?} sizes
     * @param {?=} videoId
     * @param {?=} playerVars
     * @return {?}
     */
    function (elementId, outputs, sizes, videoId, playerVars) {
        var _this = this;
        if (videoId === void 0) { videoId = ''; }
        if (playerVars === void 0) { playerVars = {}; }
        var /** @type {?} */ playerSize = {
            height: sizes.height || defaultSizes.height,
            width: sizes.width || defaultSizes.width
        };
        var /** @type {?} */ ytPlayer = Player();
        return new ytPlayer(elementId, __assign({}, playerSize, { events: {
                onReady: function (ev) {
                    _this.zone.run(function () { return outputs.ready && outputs.ready.next(ev.target); });
                },
                onStateChange: function (ev) {
                    _this.zone.run(function () { return outputs.change && outputs.change.next(ev); });
                }
            }, playerVars: playerVars,
            videoId: videoId }));
    };
    /**
     * @param {?} player
     * @param {?} isFullScreen
     * @return {?}
     */
    YoutubePlayerService.prototype.toggleFullScreen = /**
     * @param {?} player
     * @param {?} isFullScreen
     * @return {?}
     */
    function (player, isFullScreen) {
        var height = defaultSizes.height, width = defaultSizes.width;
        if (!isFullScreen) {
            height = window.innerHeight;
            width = window.innerWidth;
        }
        player.setSize(width, height);
    };
    // adpoted from uid
    /**
     * @return {?}
     */
    YoutubePlayerService.prototype.generateUniqueId = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ len = 7;
        return Math.random().toString(35).substr(2, len);
    };
    /**
     * @return {?}
     */
    YoutubePlayerService.prototype.createApi = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.api = new ReplaySubject.ReplaySubject(1);
        var /** @type {?} */ onYouTubeIframeAPIReady = function () {
            if (win()) {
                _this.api.next(YT());
            }
        };
        win()['onYouTubeIframeAPIReady'] = onYouTubeIframeAPIReady;
    };
    YoutubePlayerService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    YoutubePlayerService.ctorParameters = function () { return [
        { type: core.NgZone, },
    ]; };
    return YoutubePlayerService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var YoutubePlayerComponent = (function () {
    function YoutubePlayerComponent(playerService, elementRef, renderer) {
        this.playerService = playerService;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.videoId = '';
        /**
         * \@description sets the protocol by the navigator object
         * if there is no window, it sets a default http protocol
         * unless the protocol is set from outside
         */
        this.protocol = this.getProtocol();
        this.playerVars = {};
        // player created and initialized - sends instance of the player
        this.ready = new core.EventEmitter();
        // state change: send the YT event with its state
        this.change = new core.EventEmitter();
    }
    /**
     * @return {?}
     */
    YoutubePlayerComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ htmlId = this.playerService.generateUniqueId();
        var /** @type {?} */ playerSize = { height: this.height, width: this.width };
        var /** @type {?} */ container = this.renderer.selectRootElement('#yt-player-ngx-component');
        this.renderer.setAttribute(container, 'id', htmlId);
        this.playerService.loadPlayerApi({
            protocol: this.protocol
        });
        this.playerService.setupPlayer(htmlId, {
            change: this.change,
            ready: this.ready,
        }, playerSize, this.videoId, this.playerVars);
    };
    /**
     * @return {?}
     */
    YoutubePlayerComponent.prototype.getProtocol = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ hasWindow = window && window.location;
        var /** @type {?} */ protocol = hasWindow
            ? window.location.protocol.replace(':', '')
            : 'http';
        return protocol;
    };
    YoutubePlayerComponent.decorators = [
        { type: core.Component, args: [{
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    selector: 'youtube-player',
                    template: "\n    <div id=\"yt-player-ngx-component\"></div>\n  ",
                },] },
    ];
    /** @nocollapse */
    YoutubePlayerComponent.ctorParameters = function () { return [
        { type: YoutubePlayerService, },
        { type: core.ElementRef, },
        { type: core.Renderer2, },
    ]; };
    YoutubePlayerComponent.propDecorators = {
        "videoId": [{ type: core.Input },],
        "height": [{ type: core.Input },],
        "width": [{ type: core.Input },],
        "protocol": [{ type: core.Input },],
        "playerVars": [{ type: core.Input },],
        "ready": [{ type: core.Output },],
        "change": [{ type: core.Output },],
    };
    return YoutubePlayerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var YoutubePlayerModule = (function () {
    function YoutubePlayerModule() {
    }
    YoutubePlayerModule.decorators = [
        { type: core.NgModule, args: [{
                    declarations: [
                        YoutubePlayerComponent
                    ],
                    exports: [
                        YoutubePlayerComponent
                    ],
                    imports: [
                        common.CommonModule
                    ],
                    providers: [
                        YoutubePlayerService
                    ]
                },] },
    ];
    /** @nocollapse */
    YoutubePlayerModule.ctorParameters = function () { return []; };
    return YoutubePlayerModule;
}());

exports.YoutubePlayerModule = YoutubePlayerModule;
exports.ɵa = YoutubePlayerComponent;
exports.ɵb = YoutubePlayerService;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-youtube-player.umd.js.map
